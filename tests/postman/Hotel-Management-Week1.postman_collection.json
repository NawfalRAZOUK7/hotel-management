{
  "info": {
    "name": "Hotel Management System - Week 1",
    "description": "Collection compl√®te pour tester l'authentification et les fonctionnalit√©s de base du syst√®me de gestion h√¥teli√®re",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "receptionist_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "reset_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "verification_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Register Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.accessToken).to.be.a('string');",
                  "    pm.expect(jsonData.refreshToken).to.be.a('string');",
                  "    ",
                  "    // Store tokens for other requests",
                  "    pm.collectionVariables.set('access_token', jsonData.accessToken);",
                  "    pm.collectionVariables.set('refresh_token', jsonData.refreshToken);",
                  "    pm.collectionVariables.set('user_id', jsonData.user.id);",
                  "});",
                  "",
                  "pm.test(\"User has correct role\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.eql('CLIENT');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jean\",\n  \"lastName\": \"Dupont\",\n  \"email\": \"jean.dupont@client.com\",\n  \"password\": \"password123\",\n  \"phone\": \"0123456789\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "description": "Inscription d'un nouveau client"
          }
        },
        {
          "name": "Register Company",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Company user created correctly\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.clientType).to.eql('COMPANY');",
                  "    pm.expect(jsonData.user.companyName).to.be.a('string');",
                  "    pm.expect(jsonData.user.siret).to.be.a('string');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Marie\",\n  \"lastName\": \"Martin\",\n  \"email\": \"marie.martin@company.com\",\n  \"password\": \"password123\",\n  \"phone\": \"0123456790\",\n  \"companyName\": \"Entreprise Test SARL\",\n  \"siret\": \"12345678901234\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "description": "Inscription d'une entreprise (personne morale)"
          }
        },
        {
          "name": "Login Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Login successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.accessToken).to.be.a('string');",
                  "    pm.expect(jsonData.refreshToken).to.be.a('string');",
                  "    ",
                  "    // Update tokens",
                  "    pm.collectionVariables.set('access_token', jsonData.accessToken);",
                  "    pm.collectionVariables.set('refresh_token', jsonData.refreshToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jean.dupont@client.com\",\n  \"password\": \"password123\",\n  \"rememberMe\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "description": "Connexion d'un client existant"
          }
        },
        {
          "name": "Login with Remember Me",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Remember me flag is set\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.rememberMe).to.eql(true);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jean.dupont@client.com\",\n  \"password\": \"password123\",\n  \"rememberMe\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "description": "Connexion avec option \"Se souvenir de moi\""
          }
        },
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile data is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('role');",
                  "    pm.expect(jsonData.user).to.not.have.property('password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            },
            "description": "R√©cup√©ration du profil utilisateur connect√©"
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"New access token received\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.accessToken).to.be.a('string');",
                  "    ",
                  "    // Update access token",
                  "    pm.collectionVariables.set('access_token', jsonData.accessToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "refresh"
              ]
            },
            "description": "Renouvellement du token d'acc√®s"
          }
        },
        {
          "name": "Change Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Password changed successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('modifi√©');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"password123\",\n  \"newPassword\": \"newpassword123\",\n  \"confirmPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/change-password",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "change-password"
              ]
            },
            "description": "Changement de mot de passe utilisateur connect√©"
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Logout successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "pm.collectionVariables.set('access_token', '');",
                  "pm.collectionVariables.set('refresh_token', '');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "logout"
              ]
            },
            "description": "D√©connexion avec r√©vocation des tokens"
          }
        }
      ],
      "description": "Tests d'authentification de base"
    },
    {
      "name": "üîë Password Management",
      "item": [
        {
          "name": "Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Reset email sent confirmation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('r√©initialisation');",
                  "    ",
                  "    // In development, token might be in response",
                  "    if (jsonData.resetToken) {",
                  "        pm.collectionVariables.set('reset_token', jsonData.resetToken);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jean.dupont@client.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/forgot-password",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "forgot-password"
              ]
            },
            "description": "Demande de r√©initialisation de mot de passe"
          }
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Password reset successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.accessToken).to.be.a('string');",
                  "    ",
                  "    // Update tokens for auto-login after reset",
                  "    pm.collectionVariables.set('access_token', jsonData.accessToken);",
                  "    pm.collectionVariables.set('refresh_token', jsonData.refreshToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"resetpassword123\",\n  \"confirmPassword\": \"resetpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/reset-password/{{reset_token}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "reset-password",
                "{{reset_token}}"
              ]
            },
            "description": "R√©initialisation du mot de passe avec token"
          }
        },
        {
          "name": "Verify Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Email verified successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user.isEmailVerified).to.eql(true);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/verify-email/{{verification_token}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "verify-email",
                "{{verification_token}}"
              ]
            },
            "description": "V√©rification de l'adresse email"
          }
        },
        {
          "name": "Resend Verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verification email resent\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('renvoy√©');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jean.dupont@client.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/resend-verification",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "resend-verification"
              ]
            },
            "description": "Renvoi de l'email de v√©rification"
          }
        }
      ],
      "description": "Gestion des mots de passe et v√©rification email"
    },
    {
      "name": "üë• Admin Routes",
      "item": [
        {
          "name": "Create Admin User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Create admin user first if not exists",
                  "if (!pm.collectionVariables.get('admin_token')) {",
                  "    pm.sendRequest({",
                  "        url: pm.collectionVariables.get('base_url') + '/api/auth/register',",
                  "        method: 'POST',",
                  "        header: {",
                  "            'Content-Type': 'application/json'",
                  "        },",
                  "        body: {",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify({",
                  "                firstName: 'Admin',",
                  "                lastName: 'System',",
                  "                email: 'admin@hotel.com',",
                  "                password: 'admin123',",
                  "                phone: '0199999999',",
                  "                role: 'ADMIN'",
                  "            })",
                  "        }",
                  "    }, function (err, response) {",
                  "        if (!err && response.json().accessToken) {",
                  "            pm.collectionVariables.set('admin_token', response.json().accessToken);",
                  "        }",
                  "    });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Admin user created\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user.role).to.eql('ADMIN');",
                  "    ",
                  "    pm.collectionVariables.set('admin_token', jsonData.accessToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Admin\",\n  \"lastName\": \"System\",\n  \"email\": \"admin@hotel.com\",\n  \"password\": \"admin123\",\n  \"phone\": \"0199999999\",\n  \"role\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "description": "Cr√©ation du premier utilisateur admin"
          }
        },
        {
          "name": "Create Receptionist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Receptionist created by admin\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user.role).to.eql('RECEPTIONIST');",
                  "    ",
                  "    pm.collectionVariables.set('receptionist_token', jsonData.accessToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Pierre\",\n  \"lastName\": \"Receptionist\",\n  \"email\": \"pierre@hotel.com\",\n  \"password\": \"receptionist123\",\n  \"phone\": \"0188888888\",\n  \"role\": \"RECEPTIONIST\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/admin/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "admin",
                "users"
              ]
            },
            "description": "Cr√©ation d'un r√©ceptionniste par l'admin"
          }
        },
        {
          "name": "Toggle User Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User status toggled\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('activ√©');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/admin/users/{{user_id}}/toggle-status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "admin",
                "users",
                "{{user_id}}",
                "toggle-status"
              ]
            },
            "description": "Activation/d√©sactivation d'un utilisateur"
          }
        },
        {
          "name": "Unlock User Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Account unlocked\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('d√©verrouill√©');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/admin/users/{{user_id}}/unlock",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "admin",
                "users",
                "{{user_id}}",
                "unlock"
              ]
            },
            "description": "D√©verrouillage d'un compte utilisateur"
          }
        },
        {
          "name": "Get Admin Stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Stats returned correctly\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.stats).to.have.property('totalUsers');",
                  "    pm.expect(jsonData.stats).to.have.property('activeUsers');",
                  "    pm.expect(jsonData.stats).to.have.property('usersByRole');",
                  "    pm.expect(jsonData.stats.usersByRole).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/admin/stats",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "admin",
                "stats"
              ]
            },
            "description": "Statistiques d'authentification pour l'admin"
          }
        }
      ],
      "description": "Routes d'administration r√©serv√©es aux admins"
    },
    {
      "name": "üö´ Error Testing",
      "item": [
        {
          "name": "Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include('Identifiants invalides');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jean.dupont@client.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "description": "Test de connexion avec mauvais mot de passe"
          }
        },
        {
          "name": "Access Protected Route Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Token required error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.code).to.eql('MISSING_TOKEN');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            },
            "description": "Acc√®s √† une route prot√©g√©e sans token"
          }
        },
        {
          "name": "Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Invalid token error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.code).to.eql('INVALID_TOKEN');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.jwt.token"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            },
            "description": "Test avec token JWT invalide"
          }
        },
        {
          "name": "Client Access Admin Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Insufficient permissions error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.code).to.eql('INSUFFICIENT_PERMISSIONS');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/admin/stats",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "admin",
                "stats"
              ]
            },
            "description": "Client tentant d'acc√©der aux routes admin"
          }
        },
        {
          "name": "Register with Existing Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Email already exists error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include('d√©j√† utilis√©e');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"Duplicate\",\n  \"email\": \"jean.dupont@client.com\",\n  \"password\": \"password123\",\n  \"phone\": \"0123456789\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "description": "Tentative d'inscription avec email existant"
          }
        },
        {
          "name": "Invalid Input Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation errors returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.code).to.eql('VALIDATION_ERROR');",
                  "    pm.expect(jsonData.errors).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"Test\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\",\n  \"phone\": \"invalid-phone\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "description": "Test de validation avec donn√©es invalides"
          }
        }
      ],
      "description": "Tests des cas d'erreur et s√©curit√©"
    },
    {
      "name": "üîÑ Rate Limiting Tests",
      "item": [
        {
          "name": "Login Rate Limit Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test should be run multiple times rapidly",
                  "const iteration = pm.info.iteration;",
                  "",
                  "if (iteration < 5) {",
                  "    pm.test(\"Login attempt \" + (iteration + 1), function () {",
                  "        // First few attempts should work or fail normally",
                  "        pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "    });",
                  "} else {",
                  "    pm.test(\"Rate limit triggered\", function () {",
                  "        pm.response.to.have.status(429);",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.code).to.eql('RATE_LIMIT_EXCEEDED');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@ratelimit.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "description": "Test du rate limiting sur les tentatives de connexion"
          }
        }
      ],
      "description": "Tests de limitation de d√©bit"
    },
    {
      "name": "üß™ Development Only",
      "item": [
        {
          "name": "Token Info (Dev)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 (dev only)\", function () {",
                  "    if (pm.environment.get('NODE_ENV') === 'development') {",
                  "        pm.response.to.have.status(200);",
                  "        ",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.tokenInfo).to.have.property('expiresAt');",
                  "        pm.expect(jsonData.tokenInfo).to.have.property('isExpired');",
                  "    } else {",
                  "        pm.response.to.have.status(404);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/dev/token-info",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "dev",
                "token-info"
              ]
            },
            "description": "Informations d√©taill√©es sur le token (d√©veloppement uniquement)"
          }
        },
        {
          "name": "Cleanup Blacklist (Dev)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 (dev only)\", function () {",
                  "    if (pm.environment.get('NODE_ENV') === 'development') {",
                  "        pm.response.to.have.status(200);",
                  "        ",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.cleanedCount).to.be.a('number');",
                  "    } else {",
                  "        pm.response.to.have.status(404);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/dev/cleanup-blacklist",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "dev",
                "cleanup-blacklist"
              ]
            },
            "description": "Nettoyage de la blacklist des tokens (d√©veloppement uniquement)"
          }
        }
      ],
      "description": "Routes de d√©veloppement (supprim√©es en production)"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set default environment if not set",
          "if (!pm.environment.get('NODE_ENV')) {",
          "    pm.environment.set('NODE_ENV', 'development');",
          "}",
          "",
          "// Log request info for debugging",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test for response time",
          "pm.test(\"Response time is less than 2000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "// Global test for response format",
          "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    pm.test(\"Response is valid JSON\", function () {",
          "        pm.response.json();",
          "    });",
          "}",
          "",
          "// Log response for debugging in development",
          "if (pm.environment.get('NODE_ENV') === 'development') {",
          "    console.log('Response Status:', pm.response.status);",
          "    console.log('Response Body:', pm.response.text());",
          "}"
        ]
      }
    }
  ],
  "auth": {
    "type": "noauth"
  }
}